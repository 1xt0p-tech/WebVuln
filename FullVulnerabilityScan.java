public class FullVulnerabilityScan {
    private WebApp webApp;

    public FullVulnerabilityScan(WebApp webApp) {
        this.webApp = webApp;
    }

    public void run() {
        System.out.println("DEBUG: Starting Full Vulnerability Scan...");
        System.out.println("\n=== Full Vulnerability Scan ===");
        System.out.println("Description: This module runs a complete scan of the web application, checking for SQL Injection, XSS, and other vulnerabilities. It assesses the risk level for each and visualizes the results with a graph.");
        try {
            Thread.sleep(1000); // 1-second pause
            System.out.println("DEBUG: After initial pause");
        } catch (InterruptedException e) {
            System.out.println("Pause interrupted: " + e.getMessage());
        }

        // Check SQL Injection
        System.out.println("\nChecking SQL Injection vulnerability...");
        try {
            Thread.sleep(1500); // 1.5-second pause
            System.out.println("DEBUG: After SQL pause");
        } catch (InterruptedException e) {
            System.out.println("Pause interrupted: " + e.getMessage());
        }
        boolean sqlInjectionVulnerable = webApp.vulnerableLogin("' OR 1=1 --", "anything");
        String sqlRisk = sqlInjectionVulnerable ? "High" : "Low";

        // Check XSS with detailed tests
        System.out.println("\nChecking XSS vulnerability...");
        try {
            Thread.sleep(1000); // 1-second pause before starting
            System.out.println("DEBUG: After XSS section pause");
        } catch (InterruptedException e) {
            System.out.println("Pause interrupted: " + e.getMessage());
        }
        boolean scriptTagVulnerable = checkXss("<script>alert('XSS')</script>", "script tag injection");
        boolean eventHandlerVulnerable = checkXss("onerror=alert('XSS')", "event handler injection");
        boolean htmlInjectionVulnerable = checkXss("<img src=x onerror=alert('XSS')>", "HTML injection");
        boolean secureCommentSafe = checkSecureComment("<script>alert('XSS')</script>");
        boolean xssVulnerable = scriptTagVulnerable || eventHandlerVulnerable || htmlInjectionVulnerable;
        String xssRisk = xssVulnerable ? "High" : (secureCommentSafe ? "Low" : "Medium");

        // Check General Vulnerability
        System.out.println("\nChecking general vulnerabilities...");
        try {
            Thread.sleep(1500); // 1.5-second pause
            System.out.println("DEBUG: After general pause");
        } catch (InterruptedException e) {
            System.out.println("Pause interrupted: " + e.getMessage());
        }
        String vulnQuery = "String query = \"SELECT * FROM users WHERE username = '\" + username + \"'\";";
        boolean codeVulnerable = vulnQuery.contains("+");
        boolean loginVulnerable = webApp.vulnerableLogin("' OR 1=1 --", "wrongpassword");
        String generalRisk = (codeVulnerable || loginVulnerable) ? "Medium" : "Low";

        // Display Results
        System.out.println("\n--- Vulnerability Scan Results ---");
        System.out.println("SQL Injection Risk: " + sqlRisk);
        System.out.println("XSS Risk: " + xssRisk);
        System.out.println("General Vulnerability Risk: " + generalRisk);
        if (xssVulnerable) {
            System.out.println("XSS Issues Found:");
            if (scriptTagVulnerable) System.out.println("- Script tag injection is vulnerable.");
            if (eventHandlerVulnerable) System.out.println("- Event handler injection is vulnerable.");
            if (htmlInjectionVulnerable) System.out.println("- HTML injection is vulnerable.");
            if (!secureCommentSafe) System.out.println("- Secure comment handling needs improvement.");
        } else {
            System.out.println("XSS: No vulnerabilities detected in tested vectors.");
        }

        // Draw Graph
        System.out.println("\n--- Risk Graph ---");
        drawBar("SQL Injection", sqlRisk);
        drawBar("XSS", xssRisk);
        drawBar("General Vulnerability", generalRisk);
        System.out.println("DEBUG: Scan completed.");
    }

    private boolean checkXss(String input, String testName) {
        System.out.println("DEBUG: Checking XSS - " + testName);
        System.out.println("- Checking " + testName + " (" + input + ")...");
        try {
            Thread.sleep(1500); // 1.5-second pause
        } catch (InterruptedException e) {
            System.out.println("Pause interrupted: " + e.getMessage());
        }
        String output = webApp.vulnerableComment(input);
        boolean isVulnerable = output.contains(input);
        System.out.println("  Result: " + (isVulnerable ? "Vulnerable!" : "Safe"));
        return isVulnerable;
    }

    private boolean checkSecureComment(String input) {
        System.out.println("DEBUG: Checking secure comment");
        System.out.println("- Checking secure comment output (" + input + ")...");
        try {
            Thread.sleep(1500); // 1.5-second pause
        } catch (InterruptedException e) {
            System.out.println("Pause interrupted: " + e.getMessage());
        }
        String output = webApp.secureComment(input);
        boolean isSafe = !output.contains("<script>");
        System.out.println("  Result: " + (isSafe ? "Safe" : "Vulnerable!"));
        return isSafe;
    }

    private void drawBar(String name, String risk) {
        int barLength;
        switch (risk.toLowerCase()) {
            case "high":
                barLength = 10;
                break;
            case "medium":
                barLength = 5;
                break;
            case "low":
            default:
                barLength = 2;
                break;
        }
        System.out.print(name + ": ");
        for (int i = 0; i < barLength; i++) {
            System.out.print("=");
        }
        System.out.println(" (" + risk + ")");
    }
}