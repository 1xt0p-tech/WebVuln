public class VulnerabilityDetection {
    private WebApp webApp;

    public VulnerabilityDetection(WebApp webApp) {
        this.webApp = webApp;
    }

    public void run() {
        System.out.println("\n=== Vulnerability Scanning ===");
        System.out.println("Description: This module simulates scanning a web app for weaknesses. It uses white-box analysis (checking code) and black-box testing (trying malicious inputs) to find vulnerabilities like SQL Injection. Watch how it identifies issues automatically.");
        runWhiteBoxAnalysis();
        runBlackBoxTesting();
    }

    private void runWhiteBoxAnalysis() {
        System.out.println("\nWhite-box Analysis:");
        System.out.println("Analyzing code snippets...");
        try {
            Thread.sleep(1500); // 1.5-second pause
        } catch (InterruptedException e) {
            System.out.println("Pause interrupted.");
        }
        String vulnerableQuery = "String query = \"SELECT * FROM users WHERE username = '\" + username + \"' AND password = '\" + password + \"'\";";
        String secureQuery = "PreparedStatement stmt = conn.prepareStatement(\"SELECT * FROM users WHERE username = ? AND password = ?\");";

        System.out.println("Checking first snippet...");
        try {
            Thread.sleep(1500); // 1.5-second pause
        } catch (InterruptedException e) {
            System.out.println("Pause interrupted.");
        }
        System.out.println("Code: " + vulnerableQuery);
        System.out.println("Result: " + (containsStringConcatenation(vulnerableQuery) ? "Vulnerable (uses string concatenation)" : "Secure"));

        System.out.println("\nChecking second snippet...");
        try {
            Thread.sleep(1500); // 1.5-second pause
        } catch (InterruptedException e) {
            System.out.println("Pause interrupted.");
        }
        System.out.println("Code: " + secureQuery);
        System.out.println("Result: " + (containsStringConcatenation(secureQuery) ? "Vulnerable" : "Secure (uses parameters)"));
    }

    private boolean containsStringConcatenation(String code) {
        return code.contains("+");
    }

    private void runBlackBoxTesting() {
        System.out.println("\nBlack-box Testing:");
        System.out.println("Sending malicious input...");
        try {
            Thread.sleep(1500); // 1.5-second pause
        } catch (InterruptedException e) {
            System.out.println("Pause interrupted.");
        }
        String injectionInput = "' OR 1=1 --";
        boolean loginSuccess = webApp.vulnerableLogin(injectionInput, "wrongpassword");
        if (loginSuccess) {
            System.out.println("Vulnerability detected: Login succeeded with injection input: " + injectionInput);
        } else {
            System.out.println("No vulnerability detected with input: " + injectionInput);
        }
    }
}